/**
 * Button reset.
 */

@mixin reset-button {
	font-size: 1em;
	border: 0;
	border-radius: 0;
	background-color: transparent;
	outline: 0;
}


/**
 * Input reset.
 */

@mixin reset-input {
	font-size: 1em;
	border: 0;
	border-radius: 0;
	background-color: transparent;
	outline: 0;
}


@mixin media($query) {
	@media all and (min-width: $query) {
		@content;
	}
}

@mixin clearfix() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}


/** 
 *	Fluid Props
 *
 *  Examples:
 *
 *  @include fluid-props(margin-bottom, $fluid-min, $fluid-max, 10px, 30px)
 *
 *  will get the margin-bottom to fluidly grow (from 10 to 30px) starting at
 *  the minimum width value defined as $fluid-min
 *  (see variables.scss, currently defined at 320px)
 *  and up to the maximum width value defined as $fluid-max
 *  (see variables.scss, currently defined as the desktop breakpoint = 1680px)
 * 
 */

@mixin fluid-props($properties, $min-vw, $max-vw, $min-value, $max-value, $set-initial-properties: true, $suffix: null) {
  @if $set-initial-properties {
    @each $property in $properties {
      #{$property}: $min-value $suffix;
    }
  }

	@media screen and (min-width: $min-vw) {
		@each $property in $properties {
		 #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}) $suffix;
		}
	}

	// scaling until 2k if the max-vw equals the mockup size
	@if $max-vw == $desktop-breakpoint {
 	 $min-vw: $desktop-breakpoint;
 	 $max-vw: $wide-breakpoint;
	 $min-value: $max-value;
 	 $max-value: $max-value * $wide-breakpoint / $desktop-breakpoint;

	 @if $max-value < 0 {
		 $max-value: floor($max-value);
	 }
	 @else {
		 $max-value: ceil($max-value);
	 }

		@media screen and (min-width: $desktop-breakpoint) {
			@each $property in $properties {
			 #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}) $suffix;
			}
		}
	}

	@media screen and (min-width: $max-vw) {
		@each $property in $properties {
			#{$property}: $max-value $suffix;
		}
	}
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

/**
 * Fluid-scaler
 * A shorthand version of fluid-props,
 * to use when you want to use fluid-props from $fluid-min
 * to $fluid-max with the same base value at all sizes
 * (the base $fluid-props mixin will take care of
 * resizing beyond desktop breakpoint)
 */
@mixin fluid-scaler($properties, $value) {
	@include fluid-props($properties, $fluid-min, $fluid-max, $value, $value);
}

/**
 * Mixin for background image.
 */
@mixin background-image($image) {
	background-image: url("../img/#{$image}");
	background-position: center;
	background-repeat: no-repeat;
	background-size: cover;
}

