# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Test
GET     /test                                            controllers.Application.test()
# Home page
GET     /welcome                                         controllers.Application.welcome()
GET     /logout                                          controllers.Application.logout()

GET     /members/login                                   controllers.Application.welcome()
GET     /members/register                                controllers.Application.registration()

POST    /members/api/registration                        controllers.Application.register()
POST    /members/api/login                               controllers.Application.authenticate()

# Lost password feature
GET     /members/lostpw                                  controllers.Application.lostpw(role: String = "member")
GET     /research/lostpw                                 controllers.Application.lostpw(role: String = "research") 
GET     /providers/lostpw                                controllers.Application.lostpw(role: String = "provider")
GET     /setpw                                           controllers.Application.setpw()

POST    /common/api/password/lost                        controllers.Application.requestPasswordResetToken()
POST    /common/api/password/set                         controllers.Application.setPasswordWithToken()

# News
GET     /                                                controllers.News.index()
GET     /members/news                                    controllers.News.index()

POST    /members/api/news                                controllers.News.add()
POST    /members/api/news/get                            controllers.News.get()
PUT     /members/api/news/:id                            controllers.News.hide(id: String)
DELETE  /members/api/news/:id                            controllers.News.delete(id: String)
# Messages
GET     /members/messages                                controllers.Messages.index()
GET     /members/messages/create                         controllers.Messages.create()
GET     /members/messages/:id                            controllers.Messages.details(id: String)


POST    /shared/api/messages/get                         controllers.Messages.get()
POST    /shared/api/messages/send                        controllers.Messages.send()
DELETE  /shared/api/messages/:id                         controllers.Messages.delete(id: String)
DELETE  /shared/api/messages/:id/trash                   controllers.Messages.remove(id: String)
PUT     /shared/api/messages/:id/:from/:to               controllers.Messages.move(id: String, from: String, to: String)
# Records
GET     /members/records                                 controllers.Records.index()
GET     /members/records/:id                             controllers.Records.details(id: String)
GET     /members/records/create/:appId                   controllers.Records.create(appId: String)
GET     /members/records/filters/*filters                controllers.Records.filter(filters)

POST    /members/api/records/get                         controllers.Records.get()
GET     /members/api/records/visible                     controllers.Records.getVisibleRecords()
POST    /members/api/records/list                        controllers.Records.getRecords()
GET     /members/api/records/shared                      controllers.Records.getSharingInfo()
GET     /members/records/import/:appId                   controllers.Records.importRecords(appId: String)
GET     /records/redirect/:appId                         controllers.Records.onAuthorized(appId: String)
GET     /members/api/records/search/:query               controllers.Records.search(query: String)
POST    /members/api/records/shared                      controllers.Records.updateSharing()

GET     /records/:id/file                                controllers.Records.getFile(id: String)

# Spaces
GET     /members/spaces                                  controllers.Spaces.index()
GET     /members/spaces/:id                              controllers.Spaces.details(id: String)

POST    /members/api/spaces                              controllers.Spaces.add()
POST    /members/api/spaces/get                          controllers.Spaces.get()
DELETE  /members/api/spaces/:id                          controllers.Spaces.delete(id: String)
POST    /members/api/spaces/:id/records                  controllers.Spaces.addRecords(id: String)
GET     /members/api/spaces/:id/token                    controllers.Spaces.getToken(id: String)
GET     /members/api/spaces/:id/url                      controllers.Spaces.getUrl(id: String)
GET     /members/api/spaces/:id/preview                  controllers.Spaces.getPreviewUrl(id: String)
# Circles
GET     /members/circles                                 controllers.Circles.index()
GET     /members/circles/:id                             controllers.Circles.details(id: String)

POST    /members/api/circles                             controllers.Circles.add()
POST    /members/api/circles/get                         controllers.Circles.get()

DELETE  /members/api/circles/:id                         controllers.Circles.delete(id: String)
POST    /members/api/circles/:id/users                   controllers.Circles.addUsers(id: String)
DELETE  /members/api/circles/:id/users/:userId           controllers.Circles.removeMember(id: String, userId: String)
# Market
GET     /members/market                                  controllers.Market.index()
GET     /members/market/apps                             controllers.Market.registerAppForm()
GET     /members/market/visualizations                   controllers.Market.registerVisualizationForm()

POST    /members/api/market/apps/:type                   controllers.Market.registerApp(type: String)
POST    /members/api/market/visualizations               controllers.Market.registerVisualization()
# Search
GET     /members/search/:query                           controllers.GlobalSearch.index(query: String)
GET     /members/api/search/run/:query                   controllers.GlobalSearch.search(query: String)
GET     /members/api/search/complete/:query              controllers.GlobalSearch.complete(query: String)
# Users
GET     /members/users/:id                               controllers.Users.details(id: String)

POST    /members/api/users/get                           controllers.Users.get()
POST    /shared/api/users/get                            controllers.Users.getUsers()
GET     /shared/api/users/current                        controllers.Users.getCurrentUser()
GET     /shared/api/users/contacts                      controllers.Users.loadContacts()
DELETE  /members/api/users/pushed                        controllers.Users.clearPushed()
DELETE  /members/api/users/shared                        controllers.Users.clearShared()
GET     /members/api/users/search/:query                 controllers.Users.search(query: String)
GET     /shared/api/users/complete/:query                controllers.Users.complete(query: String)
# Members
GET     /members/dashboard/:name                         controllers.MemberFrontend.dashboard(name: String)
GET     /members/configuration                           controllers.MemberFrontend.configuration()
GET     /members/providers                               controllers.MemberFrontend.providers()
GET     /members/studies                                 controllers.MemberFrontend.studies()
GET     /templates/entercode                             controllers.MemberFrontend.entercode()
GET     /members/studies/:study/details                  controllers.MemberFrontend.studydetails(study: String)
GET     /members/studies/:study/records                  controllers.MemberFrontend.studyrecords(study: String)
# Research
GET     /research/register                               controllers.ResearchFrontend.register()
GET     /research/login                                  controllers.ResearchFrontend.login()
GET     /research/messages                               controllers.ResearchFrontend.messages()
GET     /research/messages/create                        controllers.ResearchFrontend.createMessage()
GET     /research/messages/:id                           controllers.ResearchFrontend.messageDetails(id: String)
GET     /research/studies                                controllers.ResearchFrontend.studies()
GET     /research/studies/:study/codes                   controllers.ResearchFrontend.codes(study: String)
GET     /research/studies/:study/fields                  controllers.ResearchFrontend.studyfields(study: String)
GET     /research/studies/:study/messages                controllers.ResearchFrontend.studymessages(study: String)
GET     /research/studies/:study/overview                controllers.ResearchFrontend.studyoverview(study: String)
GET     /research/studies/:study/participants            controllers.ResearchFrontend.studyparticipants(study: String)
GET     /research/studies/:study/records                 controllers.ResearchFrontend.studyrecords(study: String)
GET     /research/studies/:study/results                 controllers.ResearchFrontend.studyresults(study: String)
GET     /research/studies/:study/rules                   controllers.ResearchFrontend.studyrules(study: String)
GET     /research/studies/:study/participants/:part      controllers.ResearchFrontend.studyparticipant(study: String, part: String)
GET     /research/studies/create                         controllers.ResearchFrontend.createstudy()

POST    /research/api/register                           controllers.research.Researchers.register()
POST    /research/api/login                              controllers.research.Researchers.login()

POST    /research/api/studies                            controllers.research.Studies.create()
GET     /research/api/studies                            controllers.research.Studies.list()
GET     /research/api/studies/:study                     controllers.research.Studies.get(study: String)
GET     /research/api/studies/:study/codes               controllers.research.Studies.listCodes(study: String)
POST    /research/api/studies/:study/codes               controllers.research.Studies.generateCodes(study: String)
GET     /research/api/studies/:study/requiredinfo        controllers.research.Studies.getRequiredInformationSetup(study: String)
POST    /research/api/studies/:study/requiredinfo        controllers.research.Studies.setRequiredInformationSetup(study: String)
POST    /research/api/studies/:study/status/validate     controllers.research.Studies.startValidation(study: String)
POST    /research/api/studies/:study/status/startsearch  controllers.research.Studies.startParticipantSearch(study: String)
POST    /research/api/studies/:study/status/endsearch    controllers.research.Studies.endParticipantSearch(study: String)
POST    /research/api/studies/:study/status/start        controllers.research.Studies.startExecution(study: String)
GET     /research/api/studies/:study/participants        controllers.research.Studies.listParticipants(study: String)
GET     /research/api/studies/:study/participants/:participant controllers.research.Studies.getParticipant(study: String, participant: String)
POST    /research/api/studies/:study/approve             controllers.research.Studies.approveParticipation(study: String)
POST    /research/api/studies/:study/reject              controllers.research.Studies.rejectParticipation(study: String)

POST    /members/api/studies                             controllers.members.Studies.search()
GET     /members/api/participation                       controllers.members.Studies.list()
GET     /members/api/participation/:study                controllers.members.Studies.get(study: String)
POST    /members/api/participation/:study/request        controllers.members.Studies.requestParticipation(study: String)
POST    /members/api/participation/:study/no             controllers.members.Studies.noParticipation(study: String)
POST    /members/api/studies/entercode                   controllers.members.Studies.enterCode()
GET     /members/api/providers                           controllers.members.HealthProvider.list()
POST    /members/api/providers/confirm                   controllers.members.HealthProvider.confirmMemberKey()
POST    /members/api/providers/reject                    controllers.members.HealthProvider.rejectMemberKey()

# Healthcare Provider
GET     /providers/register                              controllers.ProviderFrontend.register()
GET     /providers/login                                 controllers.ProviderFrontend.login()
GET     /providers/messages                              controllers.ProviderFrontend.messages()
GET     /providers/messages/create                       controllers.ProviderFrontend.createMessage()
GET     /providers/messages/:id                          controllers.ProviderFrontend.messageDetails(id: String)
GET     /providers/search                                controllers.ProviderFrontend.search()
GET     /providers/member/:member                        controllers.ProviderFrontend.member(member: String)
GET     /providers/market                                controllers.ProviderFrontend.market()
GET     /providers/apps/:id                              controllers.ProviderFrontend.appDetails(id: String)
GET     /providers/visualizations/:id                    controllers.ProviderFrontend.visualizationDetails(id: String)
GET     /providers/records/create/:appId/:memberId       controllers.ProviderFrontend.createRecord(appId: String, memberId: String)
GET     /providers/member/:member/:visualization         controllers.ProviderFrontend.useVisualization(member: String, visualization: String)

POST    /providers/api/register                          controllers.providers.Providers.register()
POST    /providers/api/login                             controllers.providers.Providers.login()
POST    /providers/api/search                            controllers.providers.Providers.search()
POST    /providers/api/visualizationToken                controllers.providers.Providers.getVisualizationToken()
GET     /providers/api/member/:member                    controllers.providers.Providers.getMember(member: String)    

# Apps
POST    /apps/get                   controllers.Apps.get()
GET     /members/apps/:id           controllers.Apps.details(id: String)
PUT     /apps/:id                   controllers.Apps.install(id: String)
DELETE  /apps/:id                   controllers.Apps.uninstall(id: String)
GET     /apps/:id/installed         controllers.Apps.isInstalled(id: String)
GET     /apps/:id/url               controllers.Apps.getUrl(id: String)
GET     /apps/:id/url/preview       controllers.Apps.getPreviewUrl(id: String)
GET     /apps/:id/url/:member       controllers.Apps.getUrlForMember(id: String, member: String)
POST    /apps/:id/access/oauth2     controllers.Apps.requestAccessTokenOAuth2(id: String)
GET     /apps/:id/request/oauth1    controllers.Apps.getRequestTokenOAuth1(id: String)
POST    /apps/:id/access/oauth1     controllers.Apps.requestAccessTokenOAuth1(id: String)
# Visualizations
POST    /visualizations/get         controllers.Visualizations.get()
GET     /members/visualizations/:id         controllers.Visualizations.details(id: String)
PUT     /visualizations/:id         controllers.Visualizations.install(id: String)
DELETE  /visualizations/:id         controllers.Visualizations.uninstall(id: String)
GET     /visualizations/:id/installed controllers.Visualizations.isInstalled(id: String)
GET     /visualizations/:id/url     controllers.Visualizations.getUrl(id: String)

# JS Routes
GET     /assets/javascripts/routes  controllers.Application.javascriptRoutes()
GET     /assets/javascripts/portalroutes  controllers.Application.portalRoutes()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Genome data converter (special controller for the 23andMe Converter app)
OPTIONS /apps/gdconverter/files     controllers.apps.GenomeDataConverter.checkPreflight()
POST    /apps/gdconverter/files     controllers.apps.GenomeDataConverter.getFiles()
OPTIONS /apps/gdconverter/convert   controllers.apps.GenomeDataConverter.checkPreflight()
POST    /apps/gdconverter/convert   controllers.apps.GenomeDataConverter.convert()

# Developers Page
GET     /developers                 controllers.Developers.index()
# Apps Public API
OPTIONS /api/apps/create            controllers.AppsAPI.checkPreflight()
POST    /api/apps/create            controllers.AppsAPI.createRecord()
OPTIONS /api/apps/upload            controllers.AppsAPI.checkPreflight()
POST    /api/apps/upload            controllers.AppsAPI.uploadFile()
OPTIONS /api/apps/oauth2            controllers.AppsAPI.checkPreflight()
POST    /api/apps/oauth2            controllers.AppsAPI.oAuth2Call()
OPTIONS /api/apps/oauth1            controllers.AppsAPI.checkPreflight()
POST    /api/apps/oauth1            controllers.AppsAPI.oAuth1Call()
OPTIONS /api/apps/auth              controllers.AppsAPI.checkPreflight()
POST    /api/apps/auth              controllers.AppsAPI.authenticateExternalApp()
OPTIONS /api/apps/records           controllers.AppsAPI.checkPreflight()
POST    /api/apps/records           controllers.AppsAPI.getRecords()
# Visualizations Public API
OPTIONS /api/visualizations/ids     controllers.VisualizationsAPI.checkPreflight()
POST    /api/visualizations/ids     controllers.VisualizationsAPI.getIds()
OPTIONS /api/visualizations/records controllers.VisualizationsAPI.checkPreflight()
POST    /api/visualizations/records controllers.VisualizationsAPI.getRecords()
OPTIONS /api/visualizations/file    controllers.VisualizationsAPI.checkPreflight()
POST    /api/visualizations/file    controllers.VisualizationsAPI.getFile()
OPTIONS /api/visualizations/create  controllers.VisualizationsAPI.checkPreflight()
POST    /api/visualizations/create  controllers.VisualizationsAPI.createRecord()
