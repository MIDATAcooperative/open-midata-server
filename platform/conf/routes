# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Test
GET     /test                       controllers.Application.test()
# Home page
GET     /welcome                    controllers.Application.welcome()
GET     /login                      controllers.Application.welcome()
POST    /welcome                    controllers.Application.authenticate()
GET     /register                   controllers.Application.registration()
POST    /registration               controllers.Application.register()
GET     /logout                     controllers.Application.logout()
# Lost password feature
GET     /lostpw                     controllers.Application.lostpw(role: String = "member")
POST    /lostpw                     controllers.Application.requestPasswordResetToken()
GET     /research/lostpw            controllers.Application.lostpw(role: String = "research") 
GET     /providers/lostpw           controllers.Application.lostpw(role: String = "provider")
GET     /setpw                      controllers.Application.setpw()
POST    /setpw                      controllers.Application.setPasswordWithToken()
# News
GET     /                           controllers.News.index()
POST    /news                       controllers.News.add()
POST    /news/get                   controllers.News.get()
PUT     /news/:id                   controllers.News.hide(id: String)
DELETE  /news/:id                   controllers.News.delete(id: String)
# Messages
GET     /messages                   controllers.Messages.index()
POST    /messages/get               controllers.Messages.get()
GET     /messages/create            controllers.Messages.create()
POST    /messages/send              controllers.Messages.send()
GET     /messages/:id               controllers.Messages.details(id: String)
DELETE  /messages/:id               controllers.Messages.delete(id: String)
DELETE  /messages/:id/trash         controllers.Messages.remove(id: String)
PUT     /messages/:id/:from/:to     controllers.Messages.move(id: String, from: String, to: String)
# Records
GET     /records                    controllers.Records.index()
POST    /records/get                controllers.Records.get()
GET     /records/visible            controllers.Records.getVisibleRecords()
GET     /records/:id                controllers.Records.details(id: String)
GET     /records/create/:appId      controllers.Records.create(appId: String)
GET     /records/import/:appId      controllers.Records.importRecords(appId: String)
GET     /records/redirect/:appId    controllers.Records.onAuthorized(appId: String)
GET     /records/search/:query      controllers.Records.search(query: String)
POST    /records/show/spaces        controllers.Records.showInSpaces()
POST    /records/share/circles      controllers.Records.shareWithCircles()
POST    /records/:id/spaces         controllers.Records.updateSpaces(id: String)
POST    /records/:id/circles        controllers.Records.updateSharing(id: String)
GET     /records/:id/file           controllers.Records.getFile(id: String)
GET     /records/filters/*filters   controllers.Records.filter(filters)
# Spaces
GET     /spaces                     controllers.Spaces.index()
POST    /spaces                     controllers.Spaces.add()
POST    /spaces/get                 controllers.Spaces.get()
GET     /spaces/:id                 controllers.Spaces.details(id: String)
DELETE  /spaces/:id                 controllers.Spaces.delete(id: String)
POST    /spaces/:id/records         controllers.Spaces.addRecords(id: String)
GET     /spaces/:id/token           controllers.Spaces.getToken(id: String)
# Circles
GET     /circles                    controllers.Circles.index()
POST    /circles                    controllers.Circles.add()
POST    /circles/get                controllers.Circles.get()
GET     /circles/:id                controllers.Circles.details(id: String)
DELETE  /circles/:id                controllers.Circles.delete(id: String)
POST    /circles/:id/users          controllers.Circles.addUsers(id: String)
DELETE  /circles/:id/users/:userId  controllers.Circles.removeMember(id: String, userId: String)
# Market
GET     /market                     controllers.Market.index()
GET     /market/apps                controllers.Market.registerAppForm()
POST    /market/apps/:type          controllers.Market.registerApp(type: String)
GET     /market/visualizations      controllers.Market.registerVisualizationForm()
POST    /market/visualizations      controllers.Market.registerVisualization()
# Search
GET     /search/:query              controllers.GlobalSearch.index(query: String)
GET     /search/run/:query          controllers.GlobalSearch.search(query: String)
GET     /search/complete/:query     controllers.GlobalSearch.complete(query: String)
# Users
POST    /users/get                  controllers.Users.get()
GET     /users/current              controllers.Users.getCurrentUser()
GET     /users/contacts             controllers.Users.loadContacts()
DELETE  /users/pushed               controllers.Users.clearPushed()
DELETE  /users/shared               controllers.Users.clearShared()
GET     /users/:id                  controllers.Users.details(id: String)
GET     /users/search/:query        controllers.Users.search(query: String)
GET     /users/complete/:query      controllers.Users.complete(query: String)
# Members
GET     /members/configuration      controllers.MemberFrontend.configuration()
GET     /members/providers          controllers.MemberFrontend.providers()
GET     /members/studies            controllers.MemberFrontend.studies()
GET     /members/:study/details     controllers.MemberFrontend.studydetails(study: String)
GET     /members/:study/records     controllers.MemberFrontend.studyrecords(study: String)
# Research
GET     /research/register          controllers.ResearchFrontend.register()
GET     /research/login             controllers.ResearchFrontend.login()
GET     /research/messages          controllers.ResearchFrontend.messages()
GET     /research/studies           controllers.ResearchFrontend.studies()
GET     /research/:study/codes      controllers.ResearchFrontend.codes(study: String)
GET     /research/:study/fields     controllers.ResearchFrontend.studyfields(study: String)
GET     /research/:study/messages   controllers.ResearchFrontend.studymessages(study: String)
GET     /research/:study/overview   controllers.ResearchFrontend.studyoverview(study: String)
GET     /research/:study/participants  controllers.ResearchFrontend.studyparticipants(study: String)
GET     /research/:study/records    controllers.ResearchFrontend.studyrecords(study: String)
GET     /research/:study/results    controllers.ResearchFrontend.studyresults(study: String)
GET     /research/:study/rules      controllers.ResearchFrontend.studyrules(study: String)
GET     /research/:study/:part      controllers.ResearchFrontend.studyparticipant(study: String, part: String)
GET     /research/createstudy       controllers.ResearchFrontend.createstudy()

POST    /research/register          controllers.research.Researchers.register()
POST    /research/login             controllers.research.Researchers.login()

POST    /studies                   controllers.research.Studies.create()
GET     /studies                   controllers.research.Studies.list()
GET     /studies/:study            controllers.research.Studies.get(study: String)
GET     /studies/:study/codes      controllers.research.Studies.listCodes(study: String)
POST    /studies/:study/codes      controllers.research.Studies.generateCodes(study: String)
POST    /studies/:study/status/startsearch  controllers.research.Studies.startParticipantSearch(study: String)
POST    /studies/:study/status/endsearch  controllers.research.Studies.endParticipantSearch(study: String)
POST    /studies/:study/status/start  controllers.research.Studies.startExecution(study: String)
GET     /studies/:study/participants controllers.research.Studies.listParticipants(study: String)
GET     /studies/:study/participants/:participant controllers.research.Studies.getParticipant(study: String, participant: String)
POST    /studies/:study/approve   controllers.research.Studies.approveParticipation(study: String)
POST    /studies/:study/reject    controllers.research.Studies.rejectParticipation(study: String)

GET     /participation/studies     controllers.members.Studies.list()
GET     /participation/study/:study controllers.members.Studies.get(study: String)
POST    /participation/study/:study/request controllers.members.Studies.requestParticipation(study: String)
POST    /participation/study/:study/no controllers.members.Studies.noParticipation(study: String)
POST    /participation/entercode   controllers.members.Studies.enterCode()

# Healthcare Provider
GET     /providers/register         controllers.ProviderFrontend.register()
GET     /providers/login            controllers.ProviderFrontend.login()
GET     /providers/messages         controllers.ProviderFrontend.messages()
GET     /providers/search           controllers.ProviderFrontend.search()
GET     /providers/member/:member   controllers.ProviderFrontend.member(member: String)

POST    /providers/register         controllers.providers.Providers.register()
POST    /providers/login            controllers.providers.Providers.login()
POST    /providers/search           controllers.providers.Providers.search()
GET     /providers/info/:member     controllers.providers.Providers.getMember(member: String)    

# Apps
POST    /apps/get                   controllers.Apps.get()
GET     /apps/:id                   controllers.Apps.details(id: String)
PUT     /apps/:id                   controllers.Apps.install(id: String)
DELETE  /apps/:id                   controllers.Apps.uninstall(id: String)
GET     /apps/:id/installed         controllers.Apps.isInstalled(id: String)
GET     /apps/:id/url               controllers.Apps.getUrl(id: String)
POST    /apps/:id/access/oauth2     controllers.Apps.requestAccessTokenOAuth2(id: String)
GET     /apps/:id/request/oauth1    controllers.Apps.getRequestTokenOAuth1(id: String)
POST    /apps/:id/access/oauth1     controllers.Apps.requestAccessTokenOAuth1(id: String)
# Visualizations
POST    /visualizations/get         controllers.Visualizations.get()
GET     /visualizations/:id         controllers.Visualizations.details(id: String)
PUT     /visualizations/:id         controllers.Visualizations.install(id: String)
DELETE  /visualizations/:id         controllers.Visualizations.uninstall(id: String)
GET     /visualizations/:id/installed controllers.Visualizations.isInstalled(id: String)
GET     /visualizations/:id/url     controllers.Visualizations.getUrl(id: String)

# JS Routes
GET     /assets/javascripts/routes  controllers.Application.javascriptRoutes()
GET     /assets/javascripts/portalroutes  controllers.Application.portalRoutes()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Genome data converter (special controller for the 23andMe Converter app)
OPTIONS /apps/gdconverter/files     controllers.apps.GenomeDataConverter.checkPreflight()
POST    /apps/gdconverter/files     controllers.apps.GenomeDataConverter.getFiles()
OPTIONS /apps/gdconverter/convert   controllers.apps.GenomeDataConverter.checkPreflight()
POST    /apps/gdconverter/convert   controllers.apps.GenomeDataConverter.convert()

# Developers Page
GET     /developers                 controllers.Developers.index()
# Apps Public API
OPTIONS /api/apps/create            controllers.AppsAPI.checkPreflight()
POST    /api/apps/create            controllers.AppsAPI.createRecord()
OPTIONS /api/apps/upload            controllers.AppsAPI.checkPreflight()
POST    /api/apps/upload            controllers.AppsAPI.uploadFile()
OPTIONS /api/apps/oauth2            controllers.AppsAPI.checkPreflight()
POST    /api/apps/oauth2            controllers.AppsAPI.oAuth2Call()
OPTIONS /api/apps/oauth1            controllers.AppsAPI.checkPreflight()
POST    /api/apps/oauth1            controllers.AppsAPI.oAuth1Call()
# Visualizations Public API
OPTIONS /api/visualizations/ids     controllers.VisualizationsAPI.checkPreflight()
POST    /api/visualizations/ids     controllers.VisualizationsAPI.getIds()
OPTIONS /api/visualizations/records controllers.VisualizationsAPI.checkPreflight()
POST    /api/visualizations/records controllers.VisualizationsAPI.getRecords()
