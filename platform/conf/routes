# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Test

GET     /test                                            controllers.Application.test()
GET     /test2                                           controllers.Application.test2()
GET     /debug/aps/:id                                   controllers.Debug.get(id: String)
GET     /ping                                            controllers.Debug.ping()
OPTIONS /fhir/*all                                       controllers.FHIR.checkPreflight(all)
GET     /fhir/*all                                       controllers.FHIR.get(all)
POST    /fhir/*all                                       controllers.FHIR.post(all)
PUT     /fhir/*all                                       controllers.FHIR.put(all)
DELETE  /fhir/*all                                       controllers.FHIR.delete(all)
OPTIONS /fhir                                            controllers.FHIR.checkPreflightRoot()
GET     /fhir                                            controllers.FHIR.getRoot()
POST    /fhir                                            controllers.FHIR.postRoot()
PUT     /fhir                                            controllers.FHIR.putRoot()
DELETE  /fhir                                            controllers.FHIR.deleteRoot()
GET     /test/autorun                                    controllers.AutoRun.run()

# Home page

GET     /logout                                          controllers.Application.logout()

POST    /members/api/registration                        controllers.Application.register()
POST    /members/api/join                                controllers.QuickRegistration.register()
POST    /members/api/login                               controllers.Application.authenticate()
POST    /common/api/passphrase                           controllers.Application.providePassphrase()
POST    /common/api/passphrase/change                    controllers.Application.changePassphrase()
POST    /common/api/password/change                      controllers.Application.changePassword()
POST    /common/api/account/email/confirm                controllers.Application.confirmAccountEmail()
POST    /common/api/account/email/request                controllers.Application.requestWelcomeMail()
POST    /common/api/account/address/confirm              controllers.Application.confirmAccountAddress()
POST    /common/api/token/get                            controllers.Application.downloadToken()


POST    /common/api/password/lost                        controllers.Application.requestPasswordResetToken()
POST    /common/api/password/set                         controllers.Application.setPasswordWithToken()


POST    /members/api/news/add                            controllers.News.add()
POST    /members/api/news/get                            controllers.News.get()
POST    /admin/api/news/update                           controllers.News.update()
POST    /admin/api/news/delete/:id                       controllers.News.delete(id: String)


POST    /shared/api/messages/get                         controllers.Messages.get()
POST    /shared/api/messages/send                        controllers.Messages.send()
DELETE  /shared/api/messages/:id                         controllers.Messages.delete(id: String)
DELETE  /shared/api/messages/:id/trash                   controllers.Messages.remove(id: String)
PUT     /shared/api/messages/:id/:from/:to               controllers.Messages.move(id: String, from: String, to: String)
# Records

POST    /members/api/records/get                         controllers.Records.get()
POST    /members/api/records/delete                      controllers.Records.delete()
POST    /members/api/records/list                        controllers.Records.getRecords()
POST    /members/api/records/info                        controllers.Records.getInfo()
GET     /members/api/records/:id/view                    controllers.Records.getRecordUrl(id: String)
GET     /members/api/records/shared/:apsId               controllers.Records.getSharingDetails(apsId: String)
GET     /records/redirect/:appId                         controllers.Records.onAuthorized(appId: String)
POST    /members/api/records/shared                      controllers.Records.updateSharing()
POST    /members/api/records/share                       controllers.Records.share()
POST    /members/api/records/fix                         controllers.Records.fixAccount()

GET     /records/:id/file                                controllers.Records.getFile(id: String)

# Spaces
POST    /members/api/spaces                              controllers.Spaces.add()
POST    /members/api/spaces/get                          controllers.Spaces.get()
DELETE  /members/api/spaces/:id                          controllers.Spaces.delete(id: String)
POST    /members/api/spaces/:id/records                  controllers.Spaces.addRecords(id: String)
GET     /members/api/spaces/:id/url                      controllers.Spaces.getUrl(id: String)
GET     /members/api/spaces/:id/url/noauth               controllers.Spaces.regetUrl(id: String)


# Circles
POST    /members/api/circles                             controllers.Circles.add()
POST    /members/api/circles/get                         controllers.Circles.get()
POST    /members/api/circles/join                        controllers.Circles.joinByPasscode()
POST    /members/api/consents                            controllers.Circles.listConsents()

DELETE  /members/api/circles/:id                         controllers.Circles.delete(id: String)
POST    /members/api/circles/:id/users                   controllers.Circles.addUsers(id: String)

DELETE  /members/api/circles/:id/users/:userId           controllers.Circles.removeMember(id: String, userId: String)
# Market


POST    /developers/api/plugins                          controllers.Market.registerPlugin()
PUT     /developers/api/plugins/:appId                   controllers.Market.updatePlugin(appId: String)
PUT     /admins/api/plugins/:appId            	         controllers.Market.updatePluginStatus(appId: String)
DELETE  /admins/api/plugins/:appId            	         controllers.Market.deletePlugin(appId: String)

# Search
#GET     /members/api/search/run/:query                   controllers.GlobalSearch.search(query: String)
#GET     /members/api/search/complete/:query              controllers.GlobalSearch.complete(query: String)
# Users

POST    /members/api/users/get                           controllers.Users.get()
GET     /shared/api/users/current                        controllers.Users.getCurrentUser()
GET     /shared/api/users/contacts                      controllers.Users.loadContacts()
GET     /members/api/users/search/:query                 controllers.Users.search(query: String)
GET     /shared/api/users/complete/:query                controllers.Users.complete(query: String)
POST    /shared/api/users/updateAddress                  controllers.Users.updateAddress()
POST    /shared/api/users/updateSettings                 controllers.Users.updateSettings()

# Research

POST    /research/api/register                           controllers.research.Researchers.register()
POST    /research/api/login                              controllers.research.Researchers.login()

POST    /research/api/studies                            controllers.research.Studies.create()
GET     /research/api/studies                            controllers.research.Studies.list()
GET     /admin/api/studies                               controllers.research.Studies.listAdmin()
GET     /research/api/studies/:study                     controllers.research.Studies.get(study: String)
GET     /admin/api/studies/:study                        controllers.research.Studies.getAdmin(study: String)
PUT     /research/api/studies/:study                     controllers.research.Studies.update(study: String)
GET     /research/api/studies/:study/download            controllers.research.Studies.download(study: String)
GET     /research/api/studies/:study/codes               controllers.research.Studies.listCodes(study: String)
POST    /research/api/studies/:study/codes               controllers.research.Studies.generateCodes(study: String)
GET     /research/api/studies/:study/requiredinfo        controllers.research.Studies.getRequiredInformationSetup(study: String)
POST    /research/api/studies/:study/requiredinfo        controllers.research.Studies.setRequiredInformationSetup(study: String)
POST    /research/api/studies/:study/status/validate     controllers.research.Studies.startValidation(study: String)
POST    /admin/api/studies/:study/status/validate        controllers.research.Studies.endValidation(study: String)
POST    /research/api/studies/:study/status/startsearch  controllers.research.Studies.startParticipantSearch(study: String)
POST    /research/api/studies/:study/status/endsearch    controllers.research.Studies.endParticipantSearch(study: String)
POST    /research/api/studies/:study/status/start        controllers.research.Studies.startExecution(study: String)
POST    /research/api/studies/:study/status/finish       controllers.research.Studies.finishExecution(study: String)
POST    /research/api/studies/:study/status/abort        controllers.research.Studies.abortExecution(study: String)
POST    /research/api/studies/:study/status/delete       controllers.research.Studies.delete(study: String)
GET     /research/api/studies/:study/participants        controllers.research.Studies.listParticipants(study: String)
GET     /research/api/studies/:study/participants/:participant controllers.research.Studies.getParticipant(study: String, participant: String)
POST    /research/api/studies/:study/approve             controllers.research.Studies.approveParticipation(study: String)
POST    /research/api/studies/:study/reject              controllers.research.Studies.rejectParticipation(study: String)
POST    /research/api/studies/:study/update              controllers.research.Studies.updateParticipation(study: String)
POST    /research/api/studies/:study/share/:group        controllers.research.Studies.shareWithGroup(study: String, group:String)
POST    /research/api/studies/:study/task/:group         controllers.research.Studies.addTask(study: String, group:String)

POST    /common/api/studies                              controllers.Studies.search()
GET     /common/api/groups                               controllers.FormatAPI.listGroups()
POST    /common/api/groups                               controllers.FormatAPI.createGroup
POST    /common/api/groups/:group                        controllers.FormatAPI.updateGroup(group: String)
DELETE  /common/api/groups/:group                        controllers.FormatAPI.deleteGroup(group: String)
GET     /common/api/formats                              controllers.FormatAPI.listFormats()
GET     /common/api/contents                             controllers.FormatAPI.listContents()
POST    /common/api/contents                             controllers.FormatAPI.createContent()
POST    /common/api/contents/:content                    controllers.FormatAPI.updateContent(content: String)
DELETE  /common/api/contents/:content                    controllers.FormatAPI.deleteContent(content: String)
GET     /common/api/codes                                controllers.FormatAPI.listCodes()
POST    /common/api/codes                                controllers.FormatAPI.createCode()
POST    /common/api/codes/:code                          controllers.FormatAPI.updateCode(code: String)
DELETE  /common/api/codes/:code                          controllers.FormatAPI.deleteCode(code: String)

GET     /members/api/participation                       controllers.members.Studies.list()
GET     /members/api/participation/:study                controllers.members.Studies.get(study: String)
POST    /members/api/participation/:study/request        controllers.members.Studies.requestParticipation(study: String)
POST    /members/api/participation/:study/no             controllers.members.Studies.noParticipation(study: String)
PATCH   /members/api/participation/:study                controllers.members.Studies.updateParticipation(study: String)
POST    /members/api/studies/entercode                   controllers.members.Studies.enterCode()
GET     /members/api/providers                           controllers.members.HealthProvider.list()
POST    /members/api/providers/search                    controllers.members.HealthProvider.search()
POST    /members/api/consents/confirm                   controllers.members.HealthProvider.confirmConsent()
POST    /members/api/consents/reject                    controllers.members.HealthProvider.rejectConsent()

# Healthcare Provider
POST    /providers/api/register                          controllers.providers.Providers.register()
POST    /providers/api/login                             controllers.providers.Providers.login()
POST    /providers/api/search                            controllers.providers.Providers.search()
POST    /providers/api/list                              controllers.providers.Providers.list()
POST    /providers/api/usevisualization                  controllers.providers.Providers.getVisualizationToken()

GET     /providers/api/member/:member                    controllers.providers.Providers.getMember(member: String)    

# Developers
POST    /developers/api/register                          controllers.Developers.register()
POST    /developers/api/login                             controllers.Developers.login()

# Admins
POST    /admins/api/register                             controllers.admin.Administration.register()
POST    /admins/api/changeStatus                         controllers.admin.Administration.changeStatus()

# Tasks
POST    /shared/api/tasks/create         controllers.Tasking.add()
POST    /shared/api/tasks/list           controllers.Tasking.list()
POST    /shared/api/tasks/execute/:taskid   controllers.Tasking.execute(taskid: String)

# Apps

GET     /plugins/:id/url/:consent      controllers.Plugins.getUrlForConsent(id: String, consent: String)
POST    /apps/:id/access/oauth2     controllers.Plugins.requestAccessTokenOAuth2(id: String)
GET     /apps/:id/request/oauth1    controllers.Plugins.getRequestTokenOAuth1(id: String)
POST    /apps/:id/access/oauth1     controllers.Plugins.requestAccessTokenOAuth1(id: String)
# Visualizations
POST    /plugins                    controllers.Plugins.get()
POST    /plugins/info               controllers.Plugins.getInfo()
PUT     /plugins/:id                controllers.Plugins.install(id: String)
DELETE  /plugins/:id                controllers.Plugins.uninstall(id: String)
GET     /plugins/:id/installed      controllers.Plugins.isInstalled(id: String)
GET     /plugins/:id/authorized     controllers.Plugins.isAuthorized(id: String)
GET     /plugins/:id/url            controllers.Plugins.getUrl(id: String)

#Portal
GET     /portal/config              controllers.PortalConfig.getConfig()
POST    /portal/config              controllers.PortalConfig.setConfig()

# JS Routes
GET     /assets/javascripts/routes  controllers.Application.javascriptRoutes()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Genome data converter (special controller for the 23andMe Converter app)
OPTIONS /apps/gdconverter/files     controllers.apps.GenomeDataConverter.checkPreflight()
POST    /apps/gdconverter/files     controllers.apps.GenomeDataConverter.getFiles()
OPTIONS /apps/gdconverter/convert   controllers.apps.GenomeDataConverter.checkPreflight()
POST    /apps/gdconverter/convert   controllers.apps.GenomeDataConverter.convert()

# Mobile Public API
OPTIONS /v1/auth            controllers.MobileAPI.checkPreflight()
POST    /v1/auth            controllers.MobileAPI.authenticate()

POST    /v1/authorize            controllers.OAuth2.login()
OPTIONS /v1/token            controllers.OAuth2.checkPreflight()
POST    /v1/token            controllers.OAuth2.authenticate()

#OPTIONS /v1/midata            controllers.MobileAPI.checkPreflight()
#POST    /v1/midata            controllers.MobileAPI.midataLogin()
OPTIONS /v1/records/create  controllers.MobileAPI.checkPreflight()
POST    /v1/records/create  controllers.MobileAPI.createRecord()
OPTIONS /v1/records/update  controllers.MobileAPI.checkPreflight()
POST    /v1/records/update  controllers.MobileAPI.updateRecord()
OPTIONS /v1/records/search  controllers.MobileAPI.checkPreflight()
POST    /v1/records/search  controllers.MobileAPI.getRecords()
OPTIONS /v1/consents/search  controllers.MobileAPI.checkPreflight()
POST    /v1/consents/search  controllers.MobileAPI.getConsents()
OPTIONS /v1/records/file    controllers.MobileAPI.checkPreflight()
POST    /v1/records/file    controllers.MobileAPI.getFile()
OPTIONS /v1/records/summary    controllers.MobileAPI.checkPreflight()
POST    /v1/records/summary    controllers.MobileAPI.getInfo()
# Plugins Public API
OPTIONS /v1/plugin_api/records/ids     controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/ids     controllers.PluginsAPI.getIds()
OPTIONS /v1/plugin_api/records/search  controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/search  controllers.PluginsAPI.getRecords()
OPTIONS /v1/plugin_api/records/summary  controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/summary  controllers.PluginsAPI.getInfo()
OPTIONS /v1/plugin_api/records/file    controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/file    controllers.PluginsAPI.getFile()
OPTIONS /v1/plugin_api/records/create  controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/create  controllers.PluginsAPI.createRecord()
OPTIONS /v1/plugin_api/records/update  controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/update  controllers.PluginsAPI.updateRecord()
OPTIONS /v1/plugin_api/records/upload  controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/upload  controllers.PluginsAPI.uploadFile()
OPTIONS /v1/plugin_api/config/set      controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/config/set      controllers.PluginsAPI.setConfig()
OPTIONS /v1/plugin_api/config/get      controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/config/get      controllers.PluginsAPI.getConfig()
OPTIONS /v1/plugin_api/oauth/get      controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/oauth/get      controllers.PluginsAPI.getOAuthParams()
OPTIONS /v1/plugin_api/clone           controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/clone           controllers.PluginsAPI.cloneAs()
OPTIONS /v1/plugin_api/run             controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/run             controllers.PluginsAPI.run()
OPTIONS /v1/plugin_api/records/newId    controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/newId    controllers.PluginsAPI.generateId()



OPTIONS /v1/plugin_api/coding/search   controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/coding/search   controllers.FormatAPI.searchCoding()
OPTIONS /v1/plugin_api/content/search   controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/content/search   controllers.FormatAPI.searchContent()


OPTIONS /v1/plugin_api/request/oauth2            controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/request/oauth2            controllers.PluginsAPI.oAuth2Call()
OPTIONS /v1/plugin_api/request/oauth1            controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/request/oauth1            controllers.PluginsAPI.oAuth1Call()


OPTIONS  /*all                                           controllers.Application.checkPreflight(all)