# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Test

GET     /debug/aps/:id                                   controllers.Debug.get(request: Request, id: String)
GET     /debug/test                                      controllers.Debug.test()
GET     /api/ping                                            controllers.Debug.ping()
POST    /fhir/$p<\$process\-message>                     controllers.FHIR.postProcessMessage(request: Request, p)
POST    /fhir/Binary                                     controllers.FHIR.binaryUpload(request: Request)
GET     /fhir/.well-known/smart-configuration			 controllers.FHIR.wellknownSmartConfiguration()
OPTIONS /fhir/*all                                       controllers.FHIR.checkPreflight(all)
GET     /fhir/*all                                       controllers.FHIR.get(request: Request, all)
POST    /fhir/*all                                       controllers.FHIR.post(request: Request, all)
PUT     /fhir/*all                                       controllers.FHIR.put(request: Request, all)
DELETE  /fhir/*all                                       controllers.FHIR.delete(request: Request, all)
OPTIONS /fhir                                            controllers.FHIR.checkPreflightRoot()
GET     /fhir                                            controllers.FHIR.getRoot(request: Request)
POST    /fhir                                            controllers.FHIR.postRoot(request: Request)
PUT     /fhir                                            controllers.FHIR.putRoot(request: Request)
DELETE  /fhir                                            controllers.FHIR.deleteRoot(request: Request)
GET     /test/autorun                                    controllers.AutoRun.run()

OPTIONS /opendata/:project/fhir/*all                     controllers.FHIR.checkPreflightProject(project: String, all)
GET     /opendata/:project/fhir/*all                     controllers.FHIR.getWithEndpoint(request: Request, project: String, all)
OPTIONS /opendata/:project/fhir                          controllers.FHIR.checkPreflightProject(project: String, all="/")
GET     /opendata/:project/fhir                          controllers.FHIR.getWithEndpoint(request: Request, project: String, all="/")

# Home page

POST     /api/logout                                          controllers.Application.logout()

POST    /api/members/registration                        controllers.Application.register(request: Request)
POST    /api/members/join                                controllers.QuickRegistration.register(request: Request)

POST    /api/members/login                               controllers.Application.authenticate(request: Request)
POST    /api/common/passphrase                           controllers.Application.providePassphrase(request: Request)
POST    /api/common/passphrase/change                    controllers.Application.changePassphrase(request: Request)
POST    /api/common/password/change                      controllers.PWRecovery.changePassword(request: Request)
POST    /api/common/account/email/confirm                controllers.Application.confirmAccountEmail(request: Request)
POST    /api/common/account/email/request                controllers.Application.requestWelcomeMail(request: Request)
POST    /api/common/account/address/confirm              controllers.Application.confirmAccountAddress(request: Request)
POST    /api/common/token/get                            controllers.Application.downloadToken(request: Request)


POST    /api/common/password/lost                        controllers.Application.requestPasswordResetToken(request: Request)
POST    /api/common/password/set                         controllers.Application.setPasswordWithToken(request: Request)


POST    /api/members/news/add                            controllers.News.add(request: Request)
POST    /api/members/news/get                            controllers.News.get(request: Request)
OPTIONS /v1/news/get                                     controllers.PluginsAPI.checkPreflight()
POST    /v1/news/get                                     controllers.News.getPublic(request: Request)
POST    /api/admin/news/update                           controllers.News.update(request: Request)
POST    /api/admin/news/delete/:id                       controllers.News.delete(id: String)
POST    /api/admin/mails/get                             controllers.BulkMails.get(request: Request)
POST	/api/admin/mails/add							 controllers.BulkMails.add(request: Request)
POST	/api/admin/mails/update							 controllers.BulkMails.update(request: Request)
POST    /api/admin/mails/delete/:id	   					 controllers.BulkMails.delete(request: Request, id: String)
POST    /api/admin/mails/send/:id                        controllers.BulkMails.send(request: Request, id: String)
POST    /api/admin/mails/test/:id                        controllers.BulkMails.test(request: Request,id: String) 
POST    /api/members/mail/unsubscribe                    controllers.BulkMails.unsubscribe(request: Request)


# Records

POST    /api/members/records/get                         controllers.Records.get(request: Request)
POST    /api/members/records/delete                      controllers.Records.delete(request: Request)
POST    /api/members/records/list                        controllers.Records.getRecords(request: Request)
GET     /api/members/records/export                      controllers.Records.downloadAccountData(request: Request)
POST    /api/members/records/info                        controllers.Records.getInfo(request: Request)
GET     /api/members/records/:id/view                    controllers.Records.getRecordUrl(request: Request, id: String)
GET     /api/members/records/shared/:apsId               controllers.Records.getSharingDetails(request: Request, apsId: String)
POST    /api/members/records/shared                      controllers.Records.updateSharing(request: Request)
POST    /api/members/records/fix                         controllers.Records.fixAccount(request: Request)
POST    /api/members/records/share                       controllers.Records.shareRecord(request: Request)
POST    /api/members/records/unshare                       controllers.Records.unshareRecord(request: Request)

GET     /api/records/:id/file                                controllers.Records.getFile(request: Request,id: String)

# Spaces
POST    /api/members/spaces                              controllers.Spaces.add(request: Request)
POST    /api/members/spaces/get                          controllers.Spaces.get(request: Request)
DELETE  /api/members/spaces/:id                          controllers.Spaces.delete(request: Request, id: String)
POST    /api/members/spaces/:id/records                  controllers.Spaces.addRecords(request: Request,id: String)
GET     /api/members/spaces/:id/url                      controllers.Spaces.getUrl(request: Request, id: String, user:String ?= null)
GET     /api/members/spaces/:id/url/noauth               controllers.Spaces.regetUrl(request: Request, id: String)
DELETE  /api/members/spaces                              controllers.Spaces.reset(request: Request)


# Circles
POST    /api/members/circles                             controllers.Circles.add(request: Request)
POST    /api/members/circles/get                         controllers.Circles.get(request: Request)
POST    /api/members/circles/join                        controllers.Circles.joinByPasscode(request: Request)
POST    /api/members/consents                            controllers.Circles.listConsents(request: Request)
POST    /api/members/apps                                controllers.Circles.listApps(request: Request)
 
DELETE  /api/members/circles/:id                         controllers.Circles.delete(request: Request, id: String)
POST    /api/members/circles/:id/users                   controllers.Circles.addUsers(request: Request,id: String)

DELETE  /api/members/circles/:id/users/:userId           controllers.Circles.removeMember(request: Request, id: String, userId: String)
# Market


POST    /api/developers/plugins                          controllers.Market.registerPlugin(request: Request)
PUT     /api/developers/plugins/:appId                   controllers.Market.updatePlugin(request: Request, appId: String)
POST    /api/developers/plugins/:appId/subscriptions     controllers.Market.updateDefaultSubscriptions(request: Request,appId: String)
POST    /api/developers/plugins/:appId/licence           controllers.Market.updateLicence(request: Request,appId: String)
DELETE  /api/developers/plugins/:appId            	     controllers.Market.deletePluginDeveloper(request: Request, appId: String)
GET     /api/developers/plugins/:appId/stats             controllers.Market.getPluginStats(request: Request, appId: String)
DELETE  /api/developers/plugins/:appId/stats             controllers.Market.deletePluginStats(request: Request, appId: String)
GET     /api/developers/plugins/:appId/reviews           controllers.Market.getReviews(request: Request, appId: String)
GET     /api/shared/changelog                            controllers.Market.getSoftwareChangeLog()
POST    /api/admins/addreview                            controllers.Market.addReview(request: Request)
GET     /api/shared/links/:type/:id                      controllers.Market.getStudyAppLinks(request: Request, type: String, id:String)
POST    /api/shared/links                                controllers.Market.insertStudyAppLink(request: Request)
POST    /api/shared/links/:id                            controllers.Market.validateStudyAppLink(request: Request,id: String)
DELETE  /api/shared/links/:id                            controllers.Market.deleteStudyAppLink(request: Request, id: String)

PUT     /api/admins/plugins/:appId            	         controllers.Market.updatePluginStatus(request: Request, appId: String)
DELETE  /api/admins/plugins/:appId            	         controllers.Market.deletePlugin(request: Request, appId: String)

POST     /api/admins/importplugin                        controllers.Market.importPlugin(request: Request)
GET      /api/admins/exportplugin/:appId                 controllers.Market.exportPlugin(appId: String)

POST     /api/developers/plugins/:appId/icon             controllers.Market.uploadIcon(request: Request,appId: String)
DELETE   /api/developers/plugins/:appId/icon/:use        controllers.Market.deleteIcon(request: Request, appId: String, use: String)
POST     /api/developers/plugins/:appId/repo             controllers.Market.updateFromRepository(request: Request,appId: String)
POST     /api/developers/repos							 controllers.Market.globalRepoAction(request: Request)
GET     /api/developers/plugins/:appId/repo              controllers.Market.getDeployStatus(request: Request, appId: String)
GET      /api/shared/icon/:use/:id                       controllers.Market.getIcon(use:String, id:String)
GET      /api/debug/getopencalls/:handle                 controllers.Market.getOpenDebugCalls(handle: String)
POST     /api/debug/getopencalls/:handle                 controllers.Market.answerDebugCall(request: Request,handle: String)
POST     /api/debug/subscriptiondebug                    controllers.Market.setSubscriptionDebug(request: Request)
POST     /api/admins/licences/add                        controllers.Market.addLicence(request: Request)
POST     /api/admins/licences/search                     controllers.Market.searchLicenses(request: Request)
# Users

POST    /api/members/users/get                           controllers.Users.get(request: Request)
GET     /api/shared/users/current                        controllers.Users.getCurrentUser()
GET     /api/shared/users/stats                          controllers.Users.getAccountStats()
GET     /api/shared/users/contacts                      controllers.Users.loadContacts(request: Request)
GET     /api/members/users/search/:query                 controllers.Users.search(request: Request, query: String)
GET     /api/shared/users/complete/:query                controllers.Users.complete(query: String)
POST    /api/shared/users/updateAddress                  controllers.Users.updateAddress(request: Request)
POST    /api/shared/users/updateSettings                 controllers.Users.updateSettings(request: Request)
POST    /api/shared/users/requestMembership              controllers.Users.requestMembership(request: Request)
POST    /api/shared/users/wipe                           controllers.Users.accountWipe(request: Request)

# Research

POST    /api/research/register                           controllers.research.Researchers.register(request: Request)
POST    /api/research/addresearcher                      controllers.research.Researchers.registerOther(request: Request)
POST    /api/research/login                              controllers.research.Researchers.login(request: Request)
GET     /api/shared/org/:id                              controllers.research.Researchers.getOrganization(id: String)
POST    /api/shared/org                                  controllers.research.Researchers.updateOrganization(request: Request,id: String)

GET     /api/shared/hp/:id                              controllers.providers.Providers.getOrganization(id: String)
POST    /api/shared/hp                                  controllers.providers.Providers.updateOrganization(request: Request,id: String)
POST    /api/provider/addprovider                       controllers.providers.Providers.registerOther(request: Request)

POST    /api/research/studies                            controllers.research.Studies.create(request: Request)
GET     /api/research/studies                            controllers.research.Studies.list(request: Request)
POST    /api/admin/studies                               controllers.research.Studies.listAdmin(request: Request)
GET     /api/research/studies/:study                     controllers.research.Studies.get(request: Request, study: String)
GET     /api/admin/studies/:study                        controllers.research.Studies.getAdmin(study: String)
PUT     /api/research/studies/:study                     controllers.research.Studies.update(request: Request, study: String)
POST    /api/research/studies/:study/addgroup            controllers.research.Studies.addGroup(request: Request, study: String)
POST    /api/research/studies/:study/change              controllers.research.Studies.updateNonSetup(request: Request,study: String)
POST    /api/research/studies/:study/clone               controllers.research.Studies.cloneToNew(request: Request,study: String)
GET     /api/research/studies/:study/download            controllers.research.Studies.download(request: Request, study: String)
GET     /api/research/studies/:study/fhirdownload/:studyGroup/:mode  controllers.research.Studies.downloadFHIR(request: Request, study: String, studyGroup : String, mode : String)
GET     /api/research/studies/:study/csvdownload/:studyGroup/:mode/:file controllers.research.CSVDownload.downloadCSV(request: Request, study: String, studyGroup : String, mode : String, file : String)
POST    /api/research/studies/:study/csvdownload         controllers.research.CSVDownload.updateCSVDef(request: Request, study: String)
GET     /api/research/studies/:study/csvdownload         controllers.research.CSVDownload.getCSVDef(request: Request, study: String)
GET     /api/research/studies/:study/codes               controllers.research.Studies.listCodes(request: Request, study: String)
POST    /api/research/studies/:study/codes               controllers.research.Studies.generateCodes(request: Request,study: String)
GET     /api/research/studies/:study/requiredinfo        controllers.research.Studies.getRequiredInformationSetup(study: String)
POST    /api/research/studies/:study/requiredinfo        controllers.research.Studies.setRequiredInformationSetup(request: Request,study: String)
POST    /api/research/studies/:study/status/validate     controllers.research.Studies.startValidation(request: Request,study: String)
POST    /api/admin/studies/:study/status/validate        controllers.research.Studies.endValidation(request: Request,study: String)
POST    /api/admin/studies/:study/status/backtodraft     controllers.research.Studies.backToDraft(request: Request,study: String)
POST    /api/research/studies/:study/status/startsearch  controllers.research.Studies.startParticipantSearch(request: Request,study: String)
POST    /api/research/studies/:study/status/endsearch    controllers.research.Studies.endParticipantSearch(request: Request,study: String)
POST    /api/research/studies/:study/status/start        controllers.research.Studies.startExecution(request: Request,study: String)
POST    /api/research/studies/:study/status/finish       controllers.research.Studies.finishExecution(request: Request,study: String)
POST    /api/research/studies/:study/status/abort        controllers.research.Studies.abortExecution(request: Request,study: String)
POST    /api/research/studies/:study/status/delete       controllers.research.Studies.delete(request: Request,study: String)
POST    /api/admin/studies/:study/status/delete       controllers.admin.Administration.deleteStudy(request: Request,study: String)
POST    /api/research/studies/:study/participants        controllers.research.Studies.listParticipants(request: Request,study: String)
POST    /api/research/studies/:study/participants/count  controllers.research.Studies.countParticipants(request: Request,study: String)
GET     /api/research/studies/:study/participants/:participant controllers.research.Studies.getParticipant(request: Request, study: String, participant: String)
POST    /api/research/studies/:study/approve             controllers.research.Studies.approveParticipation(request: Request,study: String)
POST    /api/research/studies/:study/reject              controllers.research.Studies.rejectParticipation(request: Request,study: String)
POST    /api/members/studies/:study/freeze              controllers.members.Studies.retreatParticipation(request: Request,study: String)
POST    /api/research/studies/:study/update              controllers.research.Studies.updateParticipation(request: Request,study: String)
POST    /api/research/studies/:study/share/:group        controllers.research.Studies.shareWithGroup(request: Request,study: String, group:String)
POST    /api/research/studies/:study/addapp/:group       controllers.research.Studies.addApplication(request: Request,study: String, group:String)
GET     /api/admins/studies/:study/export                 controllers.research.Studies.exportStudy(study: String)
POST    /api/admins/studies                               controllers.research.Studies.importStudy(request: Request)

POST    /api/common/studies                              controllers.Studies.search(request: Request)
GET     /api/common/groups                               controllers.FormatAPI.listGroups()
POST    /api/common/groups                               controllers.FormatAPI.createGroup(request: Request)
POST    /api/common/groups/:group                        controllers.FormatAPI.updateGroup(request: Request, group: String)
DELETE  /api/common/groups/:group                        controllers.FormatAPI.deleteGroup(group: String)
POST    /api/common/groupcontent                         controllers.FormatAPI.updateGroupContent(request: Request)
GET     /api/common/formats                              controllers.FormatAPI.listFormats()
GET     /api/common/contents                             controllers.FormatAPI.listContents()
POST    /api/common/contents                             controllers.FormatAPI.searchContents(request: Request)
POST    /api/common/contents/create                      controllers.FormatAPI.createContent(request: Request)
POST    /api/common/contents/:content                    controllers.FormatAPI.updateContent(request: Request,content: String)
DELETE  /api/common/contents/:content                    controllers.FormatAPI.deleteContent(content: String)
GET     /api/common/codes                                controllers.FormatAPI.listCodes()
POST    /api/common/codes                                controllers.FormatAPI.createCode(request: Request)
POST    /api/common/codes/:code                          controllers.FormatAPI.updateCode(request: Request,code: String)
DELETE  /api/common/codes/:code                          controllers.FormatAPI.deleteCode(code: String)
POST    /api/common/coding/search                        controllers.FormatAPI.searchCodingPortal(request: Request)
GET     /api/common/exportchanges                        controllers.FormatAPI.exportChanges()
POST    /api/common/importchanges                        controllers.FormatAPI.importChanges(request: Request)

GET     /api/members/participation                       controllers.members.Studies.list(request: Request)
GET     /api/members/participation/:study                controllers.members.Studies.get(request: Request, study: String)
POST    /api/members/participation/:study/request        controllers.members.Studies.requestParticipation(request: Request,study: String)
POST    /api/members/participation/:study/no             controllers.members.Studies.noParticipation(request: Request,study: String)
PATCH   /api/members/participation/:study                controllers.members.Studies.updateParticipation(request: Request,study: String)
POST    /api/members/studies/entercode                   controllers.members.Studies.enterCode(request: Request)
GET     /api/members/providers                           controllers.members.HealthProvider.list(request: Request)
POST    /api/members/providers/search                    controllers.members.HealthProvider.search(request: Request)
POST    /api/members/consents/confirm                   controllers.members.HealthProvider.confirmConsent(request: Request)
POST    /api/members/consents/reject                    controllers.members.HealthProvider.rejectConsent(request: Request)

# Healthcare Provider
POST    /api/providers/register                          controllers.providers.Providers.register(request: Request)
POST    /api/providers/login                             controllers.providers.Providers.login(request: Request)
POST    /api/providers/search                            controllers.providers.Providers.search(request: Request)
POST    /api/providers/list                              controllers.providers.Providers.list(request: Request)
POST    /api/providers/usevisualization                  controllers.providers.Providers.getVisualizationToken(request: Request)

GET     /api/providers/member/:member                    controllers.providers.Providers.getMember(request: Request, member: String)    

POST    /api/shared/usergroups/search                     controllers.UserGroups.search(request: Request)
POST    /api/shared/usergroups/members                    controllers.UserGroups.listUserGroupMembers(request: Request)
POST    /api/shared/usergroups/create                     controllers.UserGroups.createUserGroup(request: Request)
POST    /api/shared/usergroups/delete/:group              controllers.UserGroups.deleteUserGroup(request: Request,group: String)
POST    /api/shared/usergroups/edit/:group                controllers.UserGroups.editUserGroup(request: Request,group: String)
POST    /api/shared/usergroups/adduser                    controllers.UserGroups.addMembersToUserGroup(request: Request)
POST    /api/shared/usergroups/removeuser                 controllers.UserGroups.deleteUserGroupMembership(request: Request)

# Developers
POST    /api/developers/register                          controllers.Developers.register(request: Request)
POST    /api/developers/login                             controllers.Developers.login(request: Request)
POST    /api/developers/testuser/resetpw                  controllers.Developers.resetTestAccountPassword(request: Request)

# Admins
POST    /api/admins/register                             controllers.admin.Administration.register(request: Request)
POST    /api/admins/changeStatus                         controllers.admin.Administration.changeStatus(request: Request)
POST    /api/admins/changeUserEmail                      controllers.admin.Administration.changeUserEmail(request: Request)
POST    /api/admins/changeBirthday                       controllers.admin.Administration.changeBirthday(request: Request)
POST    /api/admins/addcomment                           controllers.admin.Administration.addComment(request: Request)
POST    /api/admins/wipeaccount                          controllers.admin.Administration.adminWipeAccount(request: Request)
POST    /api/admin/stats                                 controllers.admin.Administration.getStats(request: Request)
POST    /api/admin/usage                                 controllers.admin.Administration.getUsageStats(request: Request)
GET     /api/admin/health                                controllers.admin.Administration.getSystemHealth()
GET		/api/admins/pwrecovery                           controllers.PWRecovery.getUnfinished()
POST	/api/admins/pwrecovery                           controllers.PWRecovery.storeRecoveryShare(request: Request)
POST	/api/admins/pwrecovery/finish                    controllers.PWRecovery.finishRecovery(request: Request)
POST	/api/admins/pwrecovery/servicekey                controllers.PWRecovery.requestServiceKeyRecovery(request: Request)
POST    /api/tokenaction                                 controllers.TokenActions.action(request:Request)

# Apps

# GET     /api/plugins/:id/url/:consent      controllers.Plugins.getUrlForConsent(id: String, consent: String)
POST    /api/apps/:id/access/oauth2     controllers.Plugins.requestAccessTokenOAuth2(request: Request,id: String)
GET     /api/apps/:id/request/oauth1    controllers.Plugins.getRequestTokenOAuth1(request: Request, id: String)
POST    /api/apps/:id/access/oauth1     controllers.Plugins.requestAccessTokenOAuth1(request: Request,id: String)
# Visualizations
POST    /api/plugins                    controllers.Plugins.get(request: Request)
POST    /api/plugins/info               controllers.Plugins.getInfo(request: Request)
POST    /api/plugins/autoinstall        controllers.Plugins.addMissingPlugins(request: Request)
PUT     /api/plugins/:id                controllers.Plugins.install(request: Request, id: String)
DELETE  /api/plugins/:id                controllers.Plugins.uninstall(request: Request, id: String)
GET     /api/plugins/:id/installed      controllers.Plugins.isInstalled(request: Request, id: String)
GET     /api/plugins/:id/authorized     controllers.Plugins.isAuthorized(request: Request, id: String)
GET     /api/plugins/:id/url            controllers.Plugins.getUrl(id: String)

# Services
GET     /api/servicesproject/:studyId   controllers.Services.listServiceInstancesStudy(request: Request, studyId: String)
GET     /api/services                   controllers.Services.listServiceInstances(request: Request)
GET     /api/endpoints                  controllers.Services.listEndpoints(request: Request)
GET     /api/services/:appId/app        controllers.Services.listServiceInstancesApp(request: Request, appId: String)
DELETE  /api/services/:instanceId       controllers.Services.removeServiceInstance(request: Request, instanceId: String)
GET     /api/services/:serviceId        controllers.Services.listApiKeys(request: Request, serviceId: String)
POST    /api/services/:serviceId        controllers.Services.addApiKey(request: Request,serviceId: String)
DELETE  /api/services/:serviceId/:keyId    controllers.Services.removeApiKey(request: Request, serviceId: String, keyId: String)


#Portal
GET     /api/portal/config              controllers.PortalConfig.getConfig(request: Request)
POST    /api/portal/config              controllers.PortalConfig.setConfig(request: Request)

#TermsOfUse
POST     /api/terms/get                 controllers.Terms.get(request: Request)
POST     /api/terms/add                 controllers.Terms.add(request: Request)
POST     /api/terms/search              controllers.Terms.search(request: Request)
POST     /api/terms/agreed              controllers.Terms.agreedToTerms(request: Request)
GET      /api/terms/current             controllers.Terms.currentTerms()

# JS Routes
GET     /api/assets/javascripts/routes  controllers.Application.javascriptRoutes()

# Mobile Public API
OPTIONS /v1/auth            controllers.MobileAPI.checkPreflight()
POST    /v1/auth            controllers.MobileAPI.authenticate(request: Request)

POST    /v1/authorize            controllers.OAuth2.login(request: Request)
POST    /v1/continue            controllers.OAuth2.continuelogin(request: Request)
POST    /v1/introspect          controllers.OAuth2.tokenIntrospect(request: Request)
OPTIONS /v1/token            controllers.OAuth2.checkPreflight()
POST    /v1/token            controllers.OAuth2.authenticate(request: Request)
OPTIONS /v1/userinfo            controllers.OAuth2.checkPreflight()
POST    /v1/userinfo            controllers.OAuth2.userinfo(request: Request)
GET     /v1/userinfo            controllers.OAuth2.userinfo(request: Request)

# OPTIONS /v1/register        controllers.MobileAPI.checkPreflight()
# POST    /v1/register        controllers.QuickRegistration.registerFromApp()

#OPTIONS /v1/midata            controllers.MobileAPI.checkPreflight()
#POST    /v1/midata            controllers.MobileAPI.midataLogin()
OPTIONS /v1/records/create  controllers.MobileAPI.checkPreflight()
POST    /v1/records/create  controllers.MobileAPI.createRecord(request: Request)
OPTIONS /v1/records/update  controllers.MobileAPI.checkPreflight()
POST    /v1/records/update  controllers.MobileAPI.updateRecord(request: Request)
OPTIONS /v1/records/search  controllers.MobileAPI.checkPreflight()
POST    /v1/records/search  controllers.MobileAPI.getRecords(request: Request)
OPTIONS /v1/consents/search  controllers.MobileAPI.checkPreflight()
POST    /v1/consents/search  controllers.MobileAPI.getConsents(request: Request)
OPTIONS /v1/records/file    controllers.MobileAPI.checkPreflight()
GET     /v1/records/file    controllers.MobileAPI.getFile(request: Request)
POST    /v1/records/file    controllers.MobileAPI.getImageToken(request: Request)
OPTIONS /v1/records/summary    controllers.MobileAPI.checkPreflight()
POST    /v1/records/summary    controllers.MobileAPI.getInfo(request: Request)
# Plugins Public API
OPTIONS /v1/plugin_api/records/ids     controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/ids     controllers.PluginsAPI.getIds()
OPTIONS /v1/plugin_api/records/search  controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/search  controllers.PluginsAPI.getRecords(request: Request)
OPTIONS /v1/plugin_api/records/summary  controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/summary  controllers.PluginsAPI.getInfo(request: Request)
OPTIONS /v1/plugin_api/records/file    controllers.PluginsAPI.checkPreflight()
GET     /v1/plugin_api/records/file    controllers.PluginsAPI.getFile(request: Request)
POST    /v1/plugin_api/records/file    controllers.PluginsAPI.getFile(request: Request)
OPTIONS /v1/plugin_api/records/create  controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/create  controllers.PluginsAPI.createRecord(request: Request)
OPTIONS /v1/plugin_api/records/update  controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/update  controllers.PluginsAPI.updateRecord(request: Request)
OPTIONS /v1/plugin_api/records/upload  controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/upload  controllers.PluginsAPI.uploadFile(request: Request)
OPTIONS /v1/plugin_api/config/set      controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/config/set      controllers.PluginsAPI.setConfig(request: Request)
OPTIONS /v1/plugin_api/config/get      controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/config/get      controllers.PluginsAPI.getConfig(request: Request)
OPTIONS /v1/plugin_api/oauth/get      controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/oauth/get      controllers.PluginsAPI.getOAuthParams(request: Request)
OPTIONS /v1/plugin_api/clone           controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/clone           controllers.PluginsAPI.cloneAs(request: Request)
OPTIONS /v1/plugin_api/records/newId    controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/records/newId    controllers.PluginsAPI.generateId(request: Request)



OPTIONS /v1/plugin_api/coding/search   controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/coding/search   controllers.FormatAPI.searchCoding(request: Request)
OPTIONS /v1/plugin_api/content/search   controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/content/search   controllers.FormatAPI.searchContent(request: Request)


OPTIONS /v1/plugin_api/request/oauth2            controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/request/oauth2            controllers.PluginsAPI.oAuth2Call(request: Request)
OPTIONS /v1/plugin_api/request/oauth1            controllers.PluginsAPI.checkPreflight()
POST    /v1/plugin_api/request/oauth1            controllers.PluginsAPI.oAuth1Call(request: Request)


OPTIONS  /*all                                           controllers.Application.checkPreflight(all)