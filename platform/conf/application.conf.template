#
# This file is part of the Open MIDATA Server.
#
# The Open MIDATA Server is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# The Open MIDATA Server is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the Open MIDATA Server.  If not, see <http://www.gnu.org/licenses/>.
#

# This is the main configuration file for the application.
# ~~~~~


## Server configuration
# ~~~~~
portal.originUrl="PORTAL_ORIGIN"
portal.server="DOMAIN"
platform.server="DOMAIN"
apps.server="DOMAIN"
visualizations.server="PLUGINS_SERVER"
visualizations.path="ROOTDIR/visualizations"
node.server="DOMAIN:5000"
node.path="/usr/bin/node"

errorreports.targetemail="MAIL_SECURITY_TARGET"
errorreports.targetname="Security Officer"

instanceType=INSTANCETYPE
default.language=DEFAULT_LANGUAGE

versions.midata-terms-of-use=1.2
versions.midata-privacy-policy=1.2
versions.midata-terms-of-use-hp=1.0
versions.midata-privacy-policy-hp=1.0

sms.provider="SMS_PROVIDER"
sms.token="SMS_OAUTH_TOKEN"
sms.from=Midata

# Maximum size for POST payloads
# ~~~~~
play.http.parser.maxMemoryBuffer=10MB
play.http.parser.maxDiskBuffer=100MB

play.filters.enabled=[]

play.mailer.user {
  host=MAIL_SMTP_SERVER
  port=587
  ssl=false
  tls=true
  user="USER_MAIL_SENDER"
  password="USER_MAIL_PASSWORD"
  debug=false  
  from="USER_MAIL_SENDER"
}

play.mailer.status {
  host=MAIL_SMTP_SERVER
  port=587
  ssl=false
  tls=true
  user="STATUS_MAIL_SENDER"
  password="STATUS_MAIL_PASSWORD"
  debug=false  
  from="STATUS_MAIL_SENDER"
}

play.mailer.bulk {
  host=MAIL_SMTP_SERVER
  port=587
  ssl=false
  tls=true
  user="BULK_MAIL_SENDER"
  password="BULK_MAIL_PASSWORD"
  debug=false  
  from="BULK_MAIL_SENDER"
}

play.http.errorHandler = "utils.ErrorHandler"


emails.admin="MAIL_ADMIN"

my-thread-pool-dispatcher {

	   # Dispatcher is the name of the event-based dispatcher
	   type = Dispatcher
	
	   # What kind of ExecutionService to use
	   executor = "thread-pool-executor"
	
	   # Configuration for the thread pool
	  thread-pool-executor {
		# minimum number of threads to cap factor-based core number to
		core-pool-size-min = 2
		# No of core threads ... ceil(available processors * factor)
		core-pool-size-factor = 2.0
		# maximum number of threads to cap factor-based number to
		core-pool-size-max = 10
	  }
	
	  # Throughput defines the maximum number of messages to be
	  # processed per actor before the thread jumps to the next actor.
	  # Set to 1 for as fair as possible.
	  throughput = 1
}

pinned-dispatcher {
  executor = "thread-pool-executor"
  type = PinnedDispatcher
}

slow-work-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 4
  }
  throughput = 1
}

medium-work-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 6
  }
  throughput = 1
}


quick-work-dispatcher {  
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {    
    parallelism-min = 2    
    parallelism-factor = 2.0    
    parallelism-max = 10
  }  
  throughput = 10
}

akka.actor.allow-java-serialization=on
midata.akka.actor.allow-java-serialization=on

akka {   
  actor {
                
      default-dispatcher = {
         type = Dispatcher
         executor = "thread-pool-executor"
         thread-pool-executor {
            fixed-pool-size = 8
         }
         throughput = 1
      }    
   }
}

play {
   
  akka {
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    loglevel = WARNING   
  }
    
}

midata {
    akka {
	    loglevel = WARNING
	    actor {      
	      provider = "cluster"         
	    }
	    
	    remote {
	      log-remote-lifecycle-events = on
         
          artery {
             transport = tcp 
             canonical.hostname = ${clustering.ip}
             canonical.port = ${clustering.port}
          }
	    	      	      
	      log-sent-messages = on
	      log-received-messages = on
	    }
	    
	    cluster {
          seed-nodes = [
            CLUSTER_SERVER
          ]
          
          failure-detector {
            threshold = 20
          }
           
        }
    }
}

clustering {
   ip = "PLATFORM_HOSTNAME"
   ip = ${?CLUSTER_IP}
   port = 9006
   port = ${?CLUSTER_PORT}   
}


